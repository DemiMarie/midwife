.TH midwife 1 "04 January 2015" "Midwife"
.SH NAME
midwife \- invoke the appropriate interpreter in a shebang script
.SH SYNOPSIS
.BI midwife " [%\-encoded\~argument] [SCRIPTFILE] [arguments-to-command]"
.P
.BI "midwife -n" "j filename [arguments-to-command]"
.P
.BI "midwife3" " filename [arguments-to-command]"
.SH DESCRIPTION
The #! ("shebang") mechanism is extremely useful for creating scripts
that can be executed via
.BR execve (2),
just like binary executables.
However, it suffers from several limitations:
.IP \(em
Handling of whitespace in the argument to the interpreter is not
portable: Darwin splits the argument on whitespace, while Linux does
not.
.IP \(em
No arguments may be passed after the script name but before the
script's arguments
.IP \(em
No way to interpolate the text of arguments in arguments provided to
the command
.P
The usual solution to these problems is a shell script
wrapper.
However, this has its own problems:
.IP \(em
Shells are complicated programs.
This makes them both potentially slow
to invoke, and vulnerable to security vulnerabilities (see the
"shellshock" bug in Bash).
.IP \(em
Using a shell script wrapper requires writing what is essentially a
polyglot sript where one of the languages is the shell.
This is clumsy and error-prone, and should not be needed anyway.
.P
Midwife is a solution to these problems.
It can be passed a template containing
.SH FILES
None
.SH ENVIRONMENT
If the command name is not an absolute path, $PATH is searched for the
executable using
.BR execvp (1).
.SH DIAGNOSTICS
.SH BUGS
Currently, Midwife is not aware of unicode.
Please report any other bugs you find to
.SH AUTHOR
Demetrios Obenour <demetriobenour@gmail.com>
\" Local Variables:
\" eval: (add-hook 'write-file-functions 'time-stamp)
\" eval: (add-hook 'before-save-hook 'time-stamp nil t)
\" eval: (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)
\" time-stamp-start: ".TH midwife 1 \""
\" time-stamp-format: "%02d %:b %:y"
\" mode: nroff
\" mode: auto-fill
\" End:
